import { Tabs, TabItem } from '@aws-amplify/ui-react';
import GeoMap from './../pages/geo_map/GeoMap';
import MyApplicationsPage from './../pages/platform/MyApplications';
import HeatMap from './../pages/geo_map/HeatMap';
import ObjectDetection from './../pages/object_detection/ObjectDetection';
import { API, Auth } from 'aws-amplify';
import Modal from './../pages/modal/Modal';
import { useState, useEffect } from 'react';
import { Transition } from '@headlessui/react';

const Platform = () => {
  const [sectionType, setSectionType] = useState('');
  // Changing sectionType from map to empty string to hide GeoMap feature.
  const [showModal, setShowModal] = useState(false);
  const closeModalHandler = () => {
    setShowModal(false);
  };
  const [selectedCell, setSelectedCell] = useState(null);
  const [objDetection, setobjDetection] = useState(null);

  const data = [
    { title: 'Scalable Infrastructure', text: 'A scalable infrastructure that can handle the large volumes of data generated by crowdsourced sensors.​' },
    { title: 'Automated Report Tool', text: 'An automated report tool that generates reports with the information you consider relevant​.' },
    { title: 'Cloud-hosted Framework', text: 'A cloud-hosted distributed computing framework​.' },
    { title: 'Machine Learning Models', text: 'Machine learning models that help you make better decisions, faster.​' },
    { title: 'Common Architecture', text: 'A common architecture that can be extended to any geospatial application​​.' },
    { title: 'Image Processing', text: 'Image processing, object detection, image segmentation, and classification​.​' },
  ];

  function featureSelected(index, item, event) {
    event.stopPropagation();
    setSelectedCell(index);
    if (item.title == 'Automated Report Tool') {
      setSectionType('tabular_report');
      objDetectionData();
    } else if(item.title == 'Cloud-hosted Framework') {
      setSectionType('map');
    }
  }

  function objDetectionData() {
    Auth.currentAuthenticatedUser({ bypassCache: false }).then((user) => {
      API.get('useruploadedmediainfo', '/object-detection-data', {
        headers: { Authorization: user.signInUserSession.idToken.jwtToken },
        queryStringParameters: { email: user.attributes.email },
      }).then((response) => {
        setobjDetection(response);
      }).catch((error) => {
        console.log(JSON.stringify(error));
      });
    }).catch((err) => {
      setShowModal(true);
      console.log(err);
    });
  }

  function showModalFn() {
    if (sectionType == 'map') {
      const geoMapBtn = document.querySelector('.js-geomap');
      geoMapBtn.addEventListener('click', function() {
        Auth.currentAuthenticatedUser({ bypassCache: false }).then((user) => {
          console.log(user);
        }).catch((err) => {
          setShowModal(true);
          console.log(err);
        });
      });
    }
  }

  useEffect(() => {
    showModalFn();
  }, [showModal]);

  useEffect(() => {
    showModalFn();
  }, [sectionType]);

  return (
    <div>
      <div className="space-y-8 pb-8">
        <MyApplicationsPage />
        <h1 className="text-4xl font-semibold text-left text-teal-500 mt-20">
          <span className="text-gradient">Explore </span>
          <span className="text-gradient">Our </span>
          <span className="text-gradient">Features </span>  
        </h1>
        <div className="grid grid-cols-3 gap-8 p-2">
          {data.map((item, index) => (
            <div
              key={index}
              className={`p-8 border border-gray-300 rounded-lg cursor-pointer transition-all duration-200 
                          transform hover:scale-105 ${selectedCell === index ? 'bg-black' : 'bg-gradient-to-l from-teal-400 via-teal-500 to-teal-600 rounded-lg'}`}
              onClick={(event) => featureSelected(index, item, event)}
            >
              <h2 className="text-lg font-semibold text-white">{item.title}</h2>
              <Transition
                show={selectedCell === index}
                enter="transition-opacity duration-300"
                enterFrom="opacity-0"
                enterTo="opacity-100"
                leave="transition-opacity duration-300"
                leaveFrom="opacity-100"
                leaveTo="opacity-0"
              >
                <p className="mt-2 text-white">{item.text}</p>
              </Transition>
            </div>
          ))}
        </div>
      </div>
      { objDetection && Object.keys(objDetection).length > 0 && (
        <ObjectDetection data={objDetection} />
      )}
      { showModal && <Modal closeModalFunc={closeModalHandler} /> }
      { sectionType == 'map' && <div className=''>
        <Tabs>
          <TabItem
            className='js-heatmap'
            title="HeatMap">
            <HeatMap />
          </TabItem>
          <TabItem
            className='js-geomap'
            title="GeoMap">
            <GeoMap />
          </TabItem>
        </Tabs>
      </div> }
    </div>
  );
};

export default Platform;
